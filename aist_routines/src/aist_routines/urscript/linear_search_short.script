def linearSearch():
  set_standard_analog_input_domain(0, 1)
  set_standard_analog_input_domain(1, 1)
  set_tool_analog_input_domain(0, 1)
  set_tool_analog_input_domain(1, 1)
  set_analog_outputdomain(0, 0)
  set_analog_outputdomain(1, 0)
  set_tool_voltage(0)
  set_input_actions_to_default()
  set_tcp(p[0.0,0.0,0.0,0.0,0.0,0.0])
  set_payload(0.0)
  set_gravity([0.0, 0.0, 9.82])
  path_server = rpc_factory("xmlrpc","http://localhost:4251/path")
  linalg = rpc_factory("xmlrpc","http://localhost:4251/linalg")
  global rq_from=0.0
  global rq_path_id=0
  global rq_timeof_path=-1
  global rq_path_reference_frame = get_actual_tcp_pose()
  global Fx = 0.0
  global Fy = 0.0
  global Fz = 0.0
  global Mx = 0.0
  global My = 0.0
  global Mz = 0.0
  def rq_move_relative(P_from, P_to, Pi):
    return pose_trans(P_to, pose_trans(pose_inv(P_from), Pi))
  end
  def poseToList(p):
    return [p[0], p[1], p[2], p[3], p[4], p[5]]
  end
  def listToPose(l):
    return p[l[0], l[1], l[2], l[3], l[4], l[5]]
  end
  def rq_element_wise_substract(l1, l2):
    global r = l1
    i=0
    while i<length(r):
      r[i]=l1[i]-l2[i]
      i=i+1
    end
    return r
  end
  def rq_element_wise_abs(val):
      global rval = val
      i=0
      while i<length(rval):
        rval[i]=norm(rval[i])
        i=i+1
      end
      return rval
  end
  def rq_max(l):
     global vmax = l[0]
     i=1
     while i<length(l):
       if l[i] > vmax:
          vmax = l[i]
       end
       i=i+1
     end
     return vmax
  end
  def rq_is_savate(j1, j2):
      max_joint_displacement = rq_max(rq_element_wise_abs(rq_element_wise_substract(j1, j2)))
      if max_joint_displacement > d2r(45):
        handleInitPathStatusCode(1)
      end
  end
  thread rq_getjointpositions():
    textmsg("rq_getjointpositions from ", rq_from)
    rq_jointpositions_buffer  = path_server.getjointpositions(rq_path_id, rq_from, rq_from + 1.9999, 0.008)
    rq_tcppositions_buffer = path_server.gettcpposes(rq_path_id, rq_from, rq_from + 1.9999, 0.008)
  end
  def rqinitpath(pathId):
    initPathAnswer = path_server.initpath(pathId)
    rq_timeof_path = initPathAnswer[0]
    initPathStatusCode = initPathAnswer[1]
    textmsg("rq_timeof_path: ", rq_timeof_path)
    textmsg("init path status code: ", initPathStatusCode)
    handleInitPathStatusCode(initPathStatusCode)
  end
  def handleInitPathStatusCode(initPathStatusCode):
    if initPathStatusCode == -1:
      popup("Could not compute path with the selected options.", "Robotiq's FT Sensor", error=True)
      rq_timeof_path = 0
    elif initPathStatusCode == 1:
      popup("Discontinuous path detected. Change your starting position.", "Robotiq's FT Sensor", error=True)
      rq_timeof_path = 0
    elif initPathStatusCode == 2:
      popup("Joint solution impossible. Change your starting position.", "Robotiq's FT Sensor", error=True)
      rq_timeof_path = 0
    elif initPathStatusCode == 3:
      popup("Path time limit has been reached. Increase the speed of your path or break it down in multiple shorter paths.", "Robotiq's FT Sensor", error=True)
      rq_timeof_path = 0
    elif initPathStatusCode == 4:
      popup("Could not compute path with the selected options. Computing path timeout.", "Robotiq's FT Sensor", error=True)
      rq_timeof_path = 0
    end
    if initPathStatusCode != 0:
      halt
    end
  end
  def rqpath(pathId):
    rq_path_id = pathId
    if rq_timeof_path == -1:
       rqinitpath(pathId)
    end
    if rq_timeof_path != 0:
        textmsg("starting path")
        rq_path_starting_pose = rq_path_reference_frame
        pathsize = rq_timeof_path * 125
        global rq_tcppositions_buffer = path_server.gettcpposes(rq_path_id, 0.0, 1.9999, 0.008)
        global rq_jointpositions_buffer  = path_server.getjointpositions(rq_path_id, 0.0, 1.9999, 0.008)
        rq_tcp_path = rq_tcppositions_buffer[0]
        rq_joint_path = get_inverse_kin(rq_tcp_path, poseToList(rq_jointpositions_buffer[0]))
        rq_previous_joint_path = rq_joint_path
        movej(rq_joint_path, a=0.4)
        servoj(rq_joint_path, 0.1, 0.1, 0.000, 0.1, 500)#Ã©vite un "bang", bug UR dans le target pose des servoj semble-t-il...
        rq_path_starting_pose = get_actual_tcp_pose()
        rq_path_reference_frame = rq_path_starting_pose
        textmsg("start")
        i=0
        while i < pathsize:
          jointpositions = rq_jointpositions_buffer
          tcppositions = rq_tcppositions_buffer

          if (i+250) < pathsize:
            rq_from = (i+250)*0.008
            thrd = run rq_getjointpositions()
          end
          j = 0
          while (j < 250) and (i < pathsize) :
            rq_tcp_path = tcppositions[j]
            rq_joint_path = get_inverse_kin(rq_move_relative(rq_path_starting_pose, rq_path_reference_frame, rq_tcp_path))
            rq_is_savate(rq_previous_joint_path, rq_joint_path)
            rq_previous_joint_path = rq_joint_path
            servoj(rq_joint_path, 0.1, 0.1, 0.008, 0.05, 500)
            j = j+1
            i = i+1
          end
          if i != pathsize:
            join thrd
          end
        end
        textmsg("path finished")
    end
  end #rqpath
  def rq_zero_sensor():
    if (socket_open("127.0.0.1", 63350, "rq_ft_sensor_acc")):
        socket_send_string("SET ZRO", "rq_ft_sensor_acc")
        sleep(0.1)
        socket_close("rq_ft_sensor_acc")
    end
  end
  thread read_force():
    while True:
        socket_send_string("READ DATA", "rq_ft_sensor_stream")
        rq_sensor_data = socket_read_ascii_float(6, "rq_ft_sensor_stream")
        if (rq_sensor_data[0] >= 6):
            Fx = rq_sensor_data[1]
            Fy = rq_sensor_data[2]
            Fz = rq_sensor_data[3]
            Mx = rq_sensor_data[4]
            My = rq_sensor_data[5]
            Mz = rq_sensor_data[6]
        else:
            Fx = 0.0
            Fy = 0.0
            Fz = 0.0
            Mx = 0.0
            My = 0.0
            Mz = 0.0
        end
    end
  end
  if (not socket_open("127.0.0.1", 63351, "rq_ft_sensor_stream")):
    popup("Can't connect to the FT Sensor driver", "Robotiq's FT Sensor", error=True)
  end
  socket_close("rq_ft_sensor_stream")
  if (socket_open("127.0.0.1", 63350, "rq_ft_sensor_stream")):
    run read_force()
  else:
    popup("Can't connect to the FT Sensor driver", "Robotiq's FT Sensor", error=True)
  end
rtde_set_watchdog("external_force_torque", 5, "ignore")
enable_external_ft_sensor(False)
textmsg("disable external sensor")
    global find_location = p[0,0,0,0,0,0]
    global find_distance_from_last = 0.0
    global find_mid_location_from_last = p[0,0,0,0,0,0]
    global find_dimension = 0.0
    global find_dimension_adjust = 0.0268
    def actual_force(direction="X"):
        if (direction == "X+") or (direction == "x+") or (direction == "X-") or (direction == "x-"):
            return norm(Fx)
        elif (direction == "Y+") or (direction == "y+") or (direction == "Y-") or (direction == "y-"):
            return norm(Fy)
        else:
            return norm(Fz)
        end
    end
    def rq_linear_search(direction="Z+",force = 10, speed = 0.004, max_distance = 0.02 ):
        global pos_offset_setting = p[0,0,0,0,0,0]
        if (direction == "X+") or (direction == "x+"):
            pos_offset_setting = p[max_distance,0,0,0,0,0]
        elif (direction == "X-") or (direction == "x-"):
            pos_offset_setting = p[max_distance * -1,0,0,0,0,0]
        elif (direction == "Y+") or (direction == "y+"):
            pos_offset_setting = p[0,max_distance,0,0,0,0]
        elif (direction == "Y-") or (direction == "y-"):
            pos_offset_setting = p[0,max_distance * -1,0,0,0,0]
        elif (direction == "Z+") or (direction == "z+"):
            pos_offset_setting = p[0,0,max_distance,0,0,0]
        elif (direction == "Z-") or (direction == "z-"):
            pos_offset_setting = p[0,0,max_distance * -1,0,0,0]
        elif (direction == "c_bot_diagonal"):
            theta=50
            pos_offset_setting = p[0,-max_distance *cos(d2r(theta)),max_distance*sin(d2r(theta)),0,0,0]
        else:
            popup("direction parameter must be X+, X-, Y+, Y-, Z+ or Z-","ERROR rq_find")
            halt
        end
        global speed_setting = speed
        global find_something = True
        textmsg("linear_search parameters validated")
        if (max_distance < 2):
            if ((speed > 0) and (speed <= 0.1)):
                if ((force > 0) and (force < 200)):
                    global thread_find_flag = 0
                    thread thread_find():
                        pose_temp = get_actual_tcp_pose()
                        pose_temp = pose_trans(pose_temp,pos_offset_setting)
                        movel(pose_temp,a=1.2,v=speed_setting)
                        find_something = False
                        thread_find_flag = 1
                    end
                    if (actual_force(direction)<force):
                        thread_find_handler = run thread_find()
                        while ((actual_force(direction)<force) and (thread_find_flag ==0)):
                            sync()
                        end
                        kill thread_find_handler
                        if (find_something == True):
                            textmsg("Found something with linear search")
                            find_distance_from_last=point_dist(get_actual_tcp_pose(),find_location)
                            find_dimension=find_distance_from_last - find_dimension_adjust
                            find_mid_location_from_last=interpolate_pose(find_location,get_actual_tcp_pose(),0.5)
                            find_location=get_actual_tcp_pose()
                        end
                        stopl(2.2)
                    end
                else:
                popup("Force parameter in Newtons must be between 0 and 200","ERROR rq_find")
                halt
                end
            else:
                popup("speed parameter in m/s must be between 0 and 0.1","ERROR rq_find")
                halt
            end
        else:
            popup("max_distance parameter in meters must be between 0 and 1.9","ERROR rq_find")
            halt
        end
        return find_something
    end

    rq_zero_sensor()
    textmsg("Approaching linearly.")
    rq_linear_search("{0}", {1}, {2}, {3})
    textmsg("Done.")
end
