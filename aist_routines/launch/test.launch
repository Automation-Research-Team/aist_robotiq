<launch>

  <arg name="scene"		default="dtorobo_base_scene"/>

  <arg name="product"		default="$(optenv PRODUCT default)" />
  <arg name="sim"		default="true"/>
  <arg name="dynamics"		default="true"/>
  <arg name="rqt"		default="true"/>
  <arg name="rviz"		default="true"/>
  <arg name="gazebo_gui"	default="true"/>

  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched -->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="world_name"	value="$(find torobo_gazebo
				       )/worlds/ground_plane.world"/>
    <arg name="debug"		value="false" />
    <arg name="gui"		value="$(arg gazebo_gui)" />
    <arg name="paused"		value="false"/>
    <arg name="use_sim_time"	value="true"/>
    <arg name="headless"	value="false"/>
  </include>

  <group ns="torobo">
    <!-- load rosparam -->
    <rosparam param="robot_config" command="load" file="$(find torobo_description)/config/products/$(arg product).yaml"/>

    <!-- load robot description URDF -->
    <param name="robot_description"
	   command="$(find xacro)/xacro --inorder
		    '$(find torobo_description)/urdf/load_robot.urdf.xacro'
		    path:=$(find torobo_description)/config/products/$(arg product).yaml" />

    <!-- The semantic description SRDF -->
    <!-- In order to switch yaml, python code is in param's command. The launching sequence works synchronously with this param tag's command. -->
    <param name="robot_description_semantic"
	   command="$(find torobo_description)/scripts/load_srdf.py
		    --model_dir=$(find torobo_description)/config/models
		    --srdf=torobo.srdf
		    --robot_config=$(find torobo_description)/config/products/$(arg product).yaml" />

    <!-- load controller_config -->
    <param name="/dummy"
	   command="$(find torobo_description)/scripts/load_controller_config.py
		    --model_dir=$(find torobo_description)/config/models
		    --yaml=controllers.yaml
		    --robot_config=$(find torobo_description)/config/products/$(arg product).yaml
		    --dump_file=/tmp/torobo_rosparam_controller_config.yaml" />
    <rosparam command="load"
	      file="/tmp/torobo_rosparam_controller_config.yaml"/>
  </group>

  <!-- Load the URDF into the ROS Parameter Server -->
  <!-- <include file="$(find torobo_description)/launch/load_robot_config.launch" -->
  <!-- 	   ns="torobo"> -->
  <!--   <arg name="product"		value="$(arg product)"/> -->
  <!-- </include> -->

  <!-- Run a python script to the send a service call to gazebo_ros to spawn a URDF robot -->
  <node name="urdf_spawner" pkg="gazebo_ros" type="spawn_model"
	respawn="false" output="screen"
	args="-urdf -model torobo -param /torobo/robot_description"/>

  <!-- <include if="$(arg sim)" file="$(find torobo_gazebo)/launch/torobo_world.launch"> -->
  <!--   <arg name="product" value="$(arg product)"/> -->
  <!--   <arg name="gui" value="$(arg gazebo_gui)"/> -->
  <!-- </include> -->

</launch>
